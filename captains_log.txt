        ITERATOR        TYPE
list    bidirectional
map     bidirectional
vector  random access
queue   none            Single end -> first in, first out
stack   none            Single end -> last in, first out

DETAILS A REVOIR AVANT DE TERMINER :
---------
        Insert avec reverse_iterator ??
        Voir quelles securités sont superflues dans DLL
        Je ferai mieux d'utiliser plus de polymorphisme dans mes fcts sur dynamic array
        Je fais quoi avec les difference_type ? ca sert a r mais c'est dans la stl domc hmmm.........
        Faire des tests avec autre chose que des ints
        Voir si je peux enlever Alloc du template de vector vu que je m'en sers pas
        typedef inutiles dans les iters ?

QUESTIONS :
--------------
Pourquoi ils ont mis "explicit" devant les constructeurs ?
Est ce qu'on a le droit de rajouter des fonctions pas dans la STL dans nos containers ?
Est ce qu'il faut faire la specialisation vector<bool> ?

Left to do :
        insert(position, value);
        value_comp();

[17/04]
Bon nique sa mere j'ai tout essayé : repecher mes precedents commits, avec des references (je tenais un truc mais je l'ai encore
perdu et impossible de retourner au moment ou ca marchait >.<), avec des doubles pointeurs (j'y ai cru mais "&this c'est pas un
pointeur c'est juste une rvalue", du coup non), et la je commence a en avoir trop marre d'ecrire et effacer les memes putains de
lignes pour toujours le meme resultat merdique ! 
NEXT TIME : mettre un pointeur sur parent et tout recommencer
[13/04]
Bon en vrai je crois que je vais juste reformer pour mettre un systeme de parent, ca me simplifiera ENORMEMENT la tache et je sais
meme pas si j'ai raison de me l'interdire depuis le debut. Parce que la je suis a bout, toutes les fonctions sont quasi terminées
mais j'ai changé un mini truc quelque part qui a été recouvert par les autres changements du coup j'arrive pas a retrouver ce que
c'est et j'ai vraiment l'impression que je le fixerai jamais, y'a plus qu'a rm rf a ce stade la.
NEXT TIME : tenter encore de changer l'archi -> sinon rm -rf * !!!!
        (essayer de sauvegarder juste les operations et revenir a une ancienne version)
[08/04]
Enorme avancée aujourd'hui, ca fait plaisir putain ! J'ai terminé les iterateurs (end, decrementation et reverse), j'ai fait les
autres constructeurs et l'operateur = du coup j'en suis aux modifiers, sachant que insert() est deja parfaite, erase() me parait
pas mal mais j'ai 2 leaks (mais plus de double free de root), reste les polymorphes. Ensuite swap() c'est ok, et j'ai massivement
renommé mes variables sur tout le projet.
NEXT TIME :     terminer les modifiers
                ou attaquer les operations, jviens de check ca a l'air eazyyy avec ce que j'ai deja fait
[07/04]
J'etais en plein debug d'iterateur mais la j'ai vraiment trop mal sa race je dois m'arreter pour aujourd'hui.
NEXT TIME : trouver la condition parfaite pour getNextIter() pour eviter qu'il fasse des aller-retours sur la meme branche.
[06/04]
J'ai a peu pres debuggé les soucis de la derniere fois, enfin j'ai surtout tout recommencé au niveau de l'iterateur : maintenant
je transforme ma map en LIST dans l'ordre de l'iteration. Reste quelques details a regler mais c'est prometteur...
[01/04]
Bon en vrai y'avait des soucis partout, notament j'avais completement foiré mon algo d'iteration, donc j'ai rien
resolu j'ai juste mis en evidence plus de problemes.
NEXT TIME :     ecrire une fonction qui cherche un endroit dans l'arbre, pas une valeur ou un node, juste le "lieu d'interet"
                debugger getLevel()
                fix l'iterateur qui fait du sur place
                trouver pourquoi mon 8 et 9 ne remplacent au lieu de s'ajouter l'un en dessous/a la suite de l'autre.
[30/03]
J'ai un peu tout chamboulé pour faire des fonctions inspirees du code source, plus courtes et plus propres,
en recursif et tout ! Mais j'ai gros un souci avec insert qui ne set pas le child dans le parent ce qui fait
que j'ai beau ajouter du contenu, je peux pas y acceder. Aussi l'operateur[]=newValue ne fonctionne pas, j'ai
toujours le * du default :/
NEXT TIME : debugger...
[24/03]
J'ai ecrit une fonction d'insert et l'operator[] dans l'espoir de pouvoir ajouter du contenu ou le visualiser
au moins, j'ai meme fait l'iterateur simple et la surcharge operator<< mais il semblerait que j'aie une boucle
infinie quelque part, on verra ca demain.
NEXT TIME : debugger...
[23/03]
Je peux creer une map via le constructeur par defaut, maintenant faut se pencher sur l'iterateur et les inserts.
Par contre je pige rien au coup du value_compare, je vois pas du tout a quel objet ca peut faire reference.
NEXT TIME : inserer du contenu et afficher le contenu via iterateur et non le syteme D comme actuellement
[13/03]
#vectorisoverparty !!
Si je veux essayer de reutiliser le meme iterateur que pour LIST, il faut absolument que je passe par un
objet intermediaire comme DLL, sinon je vais pas avoir les fonctions getNext/Prev. Mais avant de faire trop
la ouf je vais lire la docu, histoire de voir si je vais dans le mur ou pas.
NEXT TIME : tester les constructeurs par defaut et copie et essayer d'ajouter et visualiser le contenu,
les iterateurs on verra plus tard.
[12/03]
Sur VECTOR il reste plus que erase et swap (avec une liste vide) et on est bons. Ca segfault depuis que j'ai
modifie deleteElement() donc il faut que je me penche dessus, et que je fasse aussi une fonction qui delete et
decale plusieurs elements en meme temps.
NEXT TIME : S'arranger pour ne pas perdre les iterateurs dans erase
[10/03]
Je m'embrouille entre les sizes selon depuis quelle fonction "mere" fait appel a une autre, du coup ca segfault.
Faut revoir la gestion de la reallocation, ou les moments où la size est verifiée/incrementée
[6/03].bis
Bon ben je me suis chauffée a faire STACK ET QUEUE en 2h donc bénef !
NEXT TIME : -> VECTOR (j'ai deja fait les typedef et les constr/destr)
[6/03]
J'AI FINI LIST !!! Et ca aura pris seulement... un mois. Du coup on se revoit fin juin pour push sans bonus !
NEXT TIME : Reprendre STACK ou QUEUE, au choix (maintenant que j'ai ma LIST pour mettre dedans)
[5/03]
Le systeme de tete unique a 2 entrees marche tres bien. Il me reste plus que 3 fcts a ecrire. Et il faudrait un peu
remanier le main : creer une chaine sur laquelle on pourrait montrer toutes les operations et reset les changements
a chaque fois parce que la jpp de travailler avec des chaines de 2 elements en fin de test
NEXT TIME :     fix sort(comp);                 done
                merge(); merge(list, comp);     done
                remanier le main                done
[1/03]
Comme d'habitude je piétine, j'ai rassemble dLL et element parce que je me servais pas de l'intermediaire
de toute facon. Du coup, il faut que je fasse en sorte que myList soit un truc constant avec next = first
& prev = last, comme ca j'ai acces aux 2 bouts. Par contre va falloir bien compter.
NEXT TIME : installer le systeme de tete
[26/02]
J'ai divisé DLL et elements de la liste dans l'architecture. Tout fonctionne bien et c'est air-tight, au 
moins jusqu'a SWAP. SPLICE compile pas encore, faut revoir les fonctions a petite echelle. J'ai aussi
changé le type dans l'iterateur (dLL -> element), mais a part ca je l'ai pas touché.
NEXT TIME : splice et les autres modifiers.
[25/02]
Bon j'ai codé splice, mais ca marche pas, et il me parait necessaire a ce stade de separer la DLL : il
faut que j'ai une classe pour le node comme Thomas, et une classe liste. Et faire les fonctions les plus
petites et precises possibles. La je mets beaucoup trop de securités, c'est moche.
NEXT TIME : revoir ENCORE l'architecture de la DLL
[24/02]
J'arrete pas de remettre et renlever le systeme de tail, je sais toujours pas si c'est tres bien, mais
actuellement il y est. J'ai enfin reussi a run tous les tests (sauf modifiers) jusqu'au bout sans segfault,
mais ca leake pas mal, surtout sur le swap donc a investiguer. Swap avec liste vide --> resultats chelou, 
il ajoute des elements, soit d'une autre liste, soit qu'il a gardé en memoire, jcomprends pas...
NEXT TIME : swap / leaks / modifiers 
[22/02]
Je galere un peu sur les fonctions d'insert, entre les segfaults et les double-free. J'ai rajouté aussi
un wagon de queue a ma liste histoire d'encore plus mimic le vrai list.
>> tout compte fait je pense que c'est pas une bonne idee, ca complique beaucoup le code alors que je pense
que j'ai depuis resolu le pb qui a fait que j'ai voulu implementer ca en premier lieu...
>> je fais un push pour enlever tout ca (T-T)
NEXT TIME : segfault insert by range of iterators a resoudre
            rediger erase et les fonctions d'operations
[18/02]
Leaks fixed. En revanche, c'est vraiment trop tendu de faire en sorte que le premier element de la liste
ait du contenu, il vaut mieux qu'il serve juste de wagon de tete, ce sera plus pratique pour les
allocations et les iterateurs. Aussi je suis en train d'essayer de faire un operator<<, mais ca marche
pas de ouf alors ptet que je laisserai tomber, who knows ?
NEXT TIME : reorganiser la liste pour qu'il y ait un ou 2 maillons vides qui servent de bornes.
[16/02-17/02]
J'ai pas mal remanié ma DLL, ma LIST et mes iterateurs, c'est mieux maintenant. Du coup j'ai give up le
systeme de la STL pour les iterateurs, puisqu'en fait ils doivent avoir des comportements specifiques
selon le container donc de toute facon je peux pas autant les reutiliser aue ce aue je pensais. Du coup,
j'en ai créé un bidirectionnel general, et j'en fais heriter un const, un reverse et un const reverse.
Maintenant les fonctions de bases marchent sans segfault et elles font bien ce que je veux, par contre
ca leake a mort !!
NEXT TIME : faire la chasse aux leaks
            ecrire les tests des les fonctions de LIST pas encore testées
            continuer de rediger les fonctions de modification de LIST
            -> tester ce que je peux enlever comme securités redondantes dans dLL
[11/02]
A priori je faisais pas trop de la merde avec ma dLL et mon allocator, du coup j'ai ecrit les fonctions
dont j'aurais besoin pour la manipuler, et j'ai bien attaqué les fonctions de LIST. Du coup j'ai voulu
tester ce que j'avais écrit mais apres 1h a regler les pbs de compilation, j'ai pris un segfault de
l'espace, du coup je debuggerai demain.
NEXT TIME : eliminer les segfaults
[5/02]
Bon ben j'ai essayé de coder les fonctions de QUEUE et STACK, mais j'ai découvert que dedans y'avait un 
underlying container qui devra etre... une LIST ! Donc j'ai essayé de coder les fonctions de LIST, mais
j'ai vu qu'il fallait utiliser std::allocator pour creer mes elements et la j'ai vu trouble.
J'ai créé une doublyLinkedList, mais je comprends pas trop bien comment allouer mes elements.
NEXT TIME : comprendre comment utiliser std::allocator (-> relire ce que Thomas m'a ecrit a ce sujet)
[4/02]
J'ai presque fini les iterateurs, ils heritent tous de ForwardIterator -> bidirectional -> random_access
Sur LIST, j'ai fait tous les typedefs et recopié toutes les fcts membres et non membres de cppreference 
NEXT TIME : iterateurs -> manque plus que random_access (operator[] et autres features)
            architecture -> recopier les membres de STACK, QUEUE, MAP & VECTOR
            containers -> commencer par STACK ou QUEUE plutot que LIST qui a l'air assez badass qd mm
[3/02]
Je viens de comprendre qu'il faudrait réimplémenter every fucking iterator, j'ai envie de mourrir.
NEXT TIME : faire un input iterator deja, puis rajouter les features et surcharges dans les heritages
[2/02]
Juste créé une architecture globale qui compile avec tous les containers dans le namespace ft 
NEXT TIME : commencer a écrire les fonctions de LIST